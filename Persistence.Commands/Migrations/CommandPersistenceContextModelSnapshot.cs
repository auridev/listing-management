// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Commands;

namespace Persistence.Commands.Migrations
{
    [DbContext(typeof(CommandPersistenceContext))]
    partial class CommandPersistenceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Core.Domain.Listings.ActiveListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("expiration_date");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner");

                    b.HasKey("Id");

                    b.HasIndex("Owner")
                        .HasDatabaseName("index_active_listing_owner");

                    b.ToTable("active_listings");
                });

            modelBuilder.Entity("Core.Domain.Listings.ClosedListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("ClosedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("closed_on");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner");

                    b.HasKey("Id");

                    b.HasIndex("Owner")
                        .HasDatabaseName("index_closed_listing_owner");

                    b.ToTable("closed_listings");
                });

            modelBuilder.Entity("Core.Domain.Listings.ListingImageReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<Guid>("ParentReference")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_reference");

                    b.HasKey("Id");

                    b.ToTable("listing_image_references");
                });

            modelBuilder.Entity("Core.Domain.Listings.NewListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner");

                    b.HasKey("Id");

                    b.HasIndex("Owner")
                        .HasDatabaseName("index_new_listing_owner");

                    b.ToTable("new_listings");
                });

            modelBuilder.Entity("Core.Domain.Listings.PassiveListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset>("DeactivationDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deactivation_date");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex("Owner")
                        .HasDatabaseName("index_passive_listing_owner");

                    b.ToTable("passive_listings");
                });

            modelBuilder.Entity("Core.Domain.Listings.SuspiciousListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset>("MarkedAsSuspiciousAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("marked_as_suspicious_at");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex("Owner")
                        .HasDatabaseName("index_suspicious_listing_owner");

                    b.ToTable("suspicious_listings");
                });

            modelBuilder.Entity("Core.Domain.Messages.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("body");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<Guid>("Recipient")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipient");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("subject");

                    b.Property<DateTimeOffset?>("___efCoreSeenDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("seen_date");

                    b.HasKey("Id");

                    b.HasIndex("Recipient")
                        .HasDatabaseName("index_message_recipient");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Core.Domain.Offers.ReceivedOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner");

                    b.Property<DateTimeOffset?>("___efCoreSeenDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("seen_date");

                    b.Property<Guid?>("active_listing_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("active_listing_id");

                    b.ToTable("received_offers");
                });

            modelBuilder.Entity("Core.Domain.Offers.RejectedOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner");

                    b.Property<Guid?>("closed_listing_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("closed_listing_id");

                    b.ToTable("rejected_offers");
                });

            modelBuilder.Entity("Core.Domain.Profiles.ActiveProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset?>("___efCoreSeenDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("introduction_seen_on");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_active_profile_user_id");

                    b.ToTable("active_profiles");
                });

            modelBuilder.Entity("Core.Domain.Profiles.PassiveProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_date");

                    b.Property<DateTimeOffset>("DeactivationDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deactivation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("deactivation_reason");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("index_passive_profile_user_id");

                    b.ToTable("passive_profiles");
                });

            modelBuilder.Entity("Core.Domain.Listings.ActiveListing", b =>
                {
                    b.OwnsOne("Core.Domain.Common.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("ActiveListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Phone")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("phone_number");

                            b1.Property<string>("___efCoreCompany")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("company");

                            b1.HasKey("ActiveListingId");

                            b1.ToTable("active_listings");

                            b1.WithOwner()
                                .HasForeignKey("ActiveListingId");

                            b1.OwnsOne("Core.Domain.Common.PersonName", "PersonName", b2 =>
                                {
                                    b2.Property<Guid>("ContactDetailsActiveListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("first_name");

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("last_name");

                                    b2.HasKey("ContactDetailsActiveListingId");

                                    b2.ToTable("active_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactDetailsActiveListingId");
                                });

                            b1.Navigation("PersonName");
                        });

                    b.OwnsOne("Core.Domain.Common.GeographicLocation", "GeographicLocation", b1 =>
                        {
                            b1.Property<Guid>("ActiveListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("longitude");

                            b1.HasKey("ActiveListingId");

                            b1.ToTable("active_listings");

                            b1.WithOwner()
                                .HasForeignKey("ActiveListingId");
                        });

                    b.OwnsOne("Core.Domain.Common.ListingDetails", "ListingDetails", b1 =>
                        {
                            b1.Property<Guid>("ActiveListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("description");

                            b1.Property<int?>("MaterialType")
                                .HasMaxLength(2)
                                .HasColumnType("int")
                                .HasColumnName("material_type_id");

                            b1.Property<string>("Title")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("title");

                            b1.HasKey("ActiveListingId");

                            b1.ToTable("active_listings");

                            b1.WithOwner()
                                .HasForeignKey("ActiveListingId");

                            b1.OwnsOne("Core.Domain.Common.Weight", "Weight", b2 =>
                                {
                                    b2.Property<Guid>("ListingDetailsActiveListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Unit")
                                        .HasMaxLength(2)
                                        .HasColumnType("nvarchar(2)")
                                        .HasColumnName("weight_unit");

                                    b2.Property<float>("Value")
                                        .HasColumnType("real")
                                        .HasColumnName("weight_value");

                                    b2.HasKey("ListingDetailsActiveListingId");

                                    b2.ToTable("active_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ListingDetailsActiveListingId");
                                });

                            b1.Navigation("Weight");
                        });

                    b.OwnsOne("Core.Domain.Common.LocationDetails", "LocationDetails", b1 =>
                        {
                            b1.Property<Guid>("ActiveListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("address");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("city");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("country_code");

                            b1.Property<string>("PostCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("post_code");

                            b1.Property<string>("___efCoreState")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("state");

                            b1.HasKey("ActiveListingId");

                            b1.ToTable("active_listings");

                            b1.WithOwner()
                                .HasForeignKey("ActiveListingId");
                        });

                    b.OwnsMany("Core.Domain.Common.FavoriteMark", "Favorites", b1 =>
                        {
                            b1.Property<long>("favorite_id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<Guid>("FavoredBy")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("favored_by");

                            b1.Property<DateTimeOffset>("MarkedAsFavoriteOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("marked_as_favorite_on");

                            b1.Property<Guid>("active_listing_id")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("favorite_id");

                            b1.HasIndex("active_listing_id");

                            b1.ToTable("favorites");

                            b1.WithOwner()
                                .HasForeignKey("active_listing_id");
                        });

                    b.OwnsMany("Core.Domain.Common.Lead", "Leads", b1 =>
                        {
                            b1.Property<long>("lead_id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<DateTimeOffset>("DetailsSeenOn")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("details_seen_on");

                            b1.Property<Guid>("UserInterested")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("user_interested");

                            b1.Property<Guid>("active_listing_id")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("lead_id");

                            b1.HasIndex("active_listing_id");

                            b1.ToTable("leads");

                            b1.WithOwner()
                                .HasForeignKey("active_listing_id");
                        });

                    b.Navigation("ContactDetails");

                    b.Navigation("Favorites");

                    b.Navigation("GeographicLocation");

                    b.Navigation("Leads");

                    b.Navigation("ListingDetails");

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("Core.Domain.Listings.ClosedListing", b =>
                {
                    b.OwnsOne("Core.Domain.Common.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("ClosedListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Phone")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("phone_number");

                            b1.Property<string>("___efCoreCompany")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("company");

                            b1.HasKey("ClosedListingId");

                            b1.ToTable("closed_listings");

                            b1.WithOwner()
                                .HasForeignKey("ClosedListingId");

                            b1.OwnsOne("Core.Domain.Common.PersonName", "PersonName", b2 =>
                                {
                                    b2.Property<Guid>("ContactDetailsClosedListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("first_name");

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("last_name");

                                    b2.HasKey("ContactDetailsClosedListingId");

                                    b2.ToTable("closed_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactDetailsClosedListingId");
                                });

                            b1.Navigation("PersonName");
                        });

                    b.OwnsOne("Core.Domain.Common.GeographicLocation", "GeographicLocation", b1 =>
                        {
                            b1.Property<Guid>("ClosedListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("longitude");

                            b1.HasKey("ClosedListingId");

                            b1.ToTable("closed_listings");

                            b1.WithOwner()
                                .HasForeignKey("ClosedListingId");
                        });

                    b.OwnsOne("Core.Domain.Common.ListingDetails", "ListingDetails", b1 =>
                        {
                            b1.Property<Guid>("ClosedListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("description");

                            b1.Property<int?>("MaterialType")
                                .HasMaxLength(2)
                                .HasColumnType("int")
                                .HasColumnName("material_type_id");

                            b1.Property<string>("Title")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("title");

                            b1.HasKey("ClosedListingId");

                            b1.ToTable("closed_listings");

                            b1.WithOwner()
                                .HasForeignKey("ClosedListingId");

                            b1.OwnsOne("Core.Domain.Common.Weight", "Weight", b2 =>
                                {
                                    b2.Property<Guid>("ListingDetailsClosedListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Unit")
                                        .HasMaxLength(2)
                                        .HasColumnType("nvarchar(2)")
                                        .HasColumnName("weight_unit");

                                    b2.Property<float>("Value")
                                        .HasColumnType("real")
                                        .HasColumnName("weight_value");

                                    b2.HasKey("ListingDetailsClosedListingId");

                                    b2.ToTable("closed_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ListingDetailsClosedListingId");
                                });

                            b1.Navigation("Weight");
                        });

                    b.OwnsOne("Core.Domain.Common.LocationDetails", "LocationDetails", b1 =>
                        {
                            b1.Property<Guid>("ClosedListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("address");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("city");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("country_code");

                            b1.Property<string>("PostCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("post_code");

                            b1.Property<string>("___efCoreState")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("state");

                            b1.HasKey("ClosedListingId");

                            b1.ToTable("closed_listings");

                            b1.WithOwner()
                                .HasForeignKey("ClosedListingId");
                        });

                    b.OwnsOne("Core.Domain.Offers.AcceptedOffer", "AcceptedOffer", b1 =>
                        {
                            b1.Property<Guid>("ClosedListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("accepted_offer_created_date");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("accepted_offer_id");

                            b1.Property<Guid>("Owner")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("accepted_offer_owner");

                            b1.HasKey("ClosedListingId");

                            b1.ToTable("closed_listings");

                            b1.WithOwner()
                                .HasForeignKey("ClosedListingId");

                            b1.OwnsOne("Core.Domain.Common.MonetaryValue", "MonetaryValue", b2 =>
                                {
                                    b2.Property<Guid>("AcceptedOfferClosedListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("CurrencyCode")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("nvarchar(3)")
                                        .HasColumnName("accepted_offer_currency_code");

                                    b2.Property<decimal>("Value")
                                        .HasColumnType("money")
                                        .HasColumnName("accepted_offer_monetary_value");

                                    b2.HasKey("AcceptedOfferClosedListingId");

                                    b2.ToTable("closed_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("AcceptedOfferClosedListingId");
                                });

                            b1.Navigation("MonetaryValue");
                        });

                    b.Navigation("AcceptedOffer");

                    b.Navigation("ContactDetails");

                    b.Navigation("GeographicLocation");

                    b.Navigation("ListingDetails");

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("Core.Domain.Listings.NewListing", b =>
                {
                    b.OwnsOne("Core.Domain.Common.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("NewListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Phone")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("phone_number");

                            b1.Property<string>("___efCoreCompany")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("company");

                            b1.HasKey("NewListingId");

                            b1.ToTable("new_listings");

                            b1.WithOwner()
                                .HasForeignKey("NewListingId");

                            b1.OwnsOne("Core.Domain.Common.PersonName", "PersonName", b2 =>
                                {
                                    b2.Property<Guid>("ContactDetailsNewListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("first_name");

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("last_name");

                                    b2.HasKey("ContactDetailsNewListingId");

                                    b2.ToTable("new_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactDetailsNewListingId");
                                });

                            b1.Navigation("PersonName");
                        });

                    b.OwnsOne("Core.Domain.Common.GeographicLocation", "GeographicLocation", b1 =>
                        {
                            b1.Property<Guid>("NewListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("longitude");

                            b1.HasKey("NewListingId");

                            b1.ToTable("new_listings");

                            b1.WithOwner()
                                .HasForeignKey("NewListingId");
                        });

                    b.OwnsOne("Core.Domain.Common.ListingDetails", "ListingDetails", b1 =>
                        {
                            b1.Property<Guid>("NewListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("description");

                            b1.Property<int?>("MaterialType")
                                .HasMaxLength(2)
                                .HasColumnType("int")
                                .HasColumnName("material_type_id");

                            b1.Property<string>("Title")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("title");

                            b1.HasKey("NewListingId");

                            b1.ToTable("new_listings");

                            b1.WithOwner()
                                .HasForeignKey("NewListingId");

                            b1.OwnsOne("Core.Domain.Common.Weight", "Weight", b2 =>
                                {
                                    b2.Property<Guid>("ListingDetailsNewListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Unit")
                                        .HasMaxLength(2)
                                        .HasColumnType("nvarchar(2)")
                                        .HasColumnName("weight_unit");

                                    b2.Property<float>("Value")
                                        .HasColumnType("real")
                                        .HasColumnName("weight_value");

                                    b2.HasKey("ListingDetailsNewListingId");

                                    b2.ToTable("new_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ListingDetailsNewListingId");
                                });

                            b1.Navigation("Weight");
                        });

                    b.OwnsOne("Core.Domain.Common.LocationDetails", "LocationDetails", b1 =>
                        {
                            b1.Property<Guid>("NewListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("address");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("city");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("country_code");

                            b1.Property<string>("PostCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("post_code");

                            b1.Property<string>("___efCoreState")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("state");

                            b1.HasKey("NewListingId");

                            b1.ToTable("new_listings");

                            b1.WithOwner()
                                .HasForeignKey("NewListingId");
                        });

                    b.Navigation("ContactDetails");

                    b.Navigation("GeographicLocation");

                    b.Navigation("ListingDetails");

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("Core.Domain.Listings.PassiveListing", b =>
                {
                    b.OwnsOne("Core.Domain.Common.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("PassiveListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Phone")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("phone_number");

                            b1.Property<string>("___efCoreCompany")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("company");

                            b1.HasKey("PassiveListingId");

                            b1.ToTable("passive_listings");

                            b1.WithOwner()
                                .HasForeignKey("PassiveListingId");

                            b1.OwnsOne("Core.Domain.Common.PersonName", "PersonName", b2 =>
                                {
                                    b2.Property<Guid>("ContactDetailsPassiveListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("first_name");

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("last_name");

                                    b2.HasKey("ContactDetailsPassiveListingId");

                                    b2.ToTable("passive_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactDetailsPassiveListingId");
                                });

                            b1.Navigation("PersonName");
                        });

                    b.OwnsOne("Core.Domain.Common.GeographicLocation", "GeographicLocation", b1 =>
                        {
                            b1.Property<Guid>("PassiveListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("longitude");

                            b1.HasKey("PassiveListingId");

                            b1.ToTable("passive_listings");

                            b1.WithOwner()
                                .HasForeignKey("PassiveListingId");
                        });

                    b.OwnsOne("Core.Domain.Common.ListingDetails", "ListingDetails", b1 =>
                        {
                            b1.Property<Guid>("PassiveListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("description");

                            b1.Property<int?>("MaterialType")
                                .HasMaxLength(2)
                                .HasColumnType("int")
                                .HasColumnName("material_type_id");

                            b1.Property<string>("Title")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("title");

                            b1.HasKey("PassiveListingId");

                            b1.ToTable("passive_listings");

                            b1.WithOwner()
                                .HasForeignKey("PassiveListingId");

                            b1.OwnsOne("Core.Domain.Common.Weight", "Weight", b2 =>
                                {
                                    b2.Property<Guid>("ListingDetailsPassiveListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Unit")
                                        .HasMaxLength(2)
                                        .HasColumnType("nvarchar(2)")
                                        .HasColumnName("weight_unit");

                                    b2.Property<float>("Value")
                                        .HasColumnType("real")
                                        .HasColumnName("weight_value");

                                    b2.HasKey("ListingDetailsPassiveListingId");

                                    b2.ToTable("passive_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ListingDetailsPassiveListingId");
                                });

                            b1.Navigation("Weight");
                        });

                    b.OwnsOne("Core.Domain.Common.LocationDetails", "LocationDetails", b1 =>
                        {
                            b1.Property<Guid>("PassiveListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("address");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("city");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("country_code");

                            b1.Property<string>("PostCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("post_code");

                            b1.Property<string>("___efCoreState")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("state");

                            b1.HasKey("PassiveListingId");

                            b1.ToTable("passive_listings");

                            b1.WithOwner()
                                .HasForeignKey("PassiveListingId");
                        });

                    b.Navigation("ContactDetails");

                    b.Navigation("GeographicLocation");

                    b.Navigation("ListingDetails");

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("Core.Domain.Listings.SuspiciousListing", b =>
                {
                    b.OwnsOne("Core.Domain.Common.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("SuspiciousListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Phone")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("phone_number");

                            b1.Property<string>("___efCoreCompany")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("company");

                            b1.HasKey("SuspiciousListingId");

                            b1.ToTable("suspicious_listings");

                            b1.WithOwner()
                                .HasForeignKey("SuspiciousListingId");

                            b1.OwnsOne("Core.Domain.Common.PersonName", "PersonName", b2 =>
                                {
                                    b2.Property<Guid>("ContactDetailsSuspiciousListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("first_name");

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("last_name");

                                    b2.HasKey("ContactDetailsSuspiciousListingId");

                                    b2.ToTable("suspicious_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactDetailsSuspiciousListingId");
                                });

                            b1.Navigation("PersonName");
                        });

                    b.OwnsOne("Core.Domain.Common.GeographicLocation", "GeographicLocation", b1 =>
                        {
                            b1.Property<Guid>("SuspiciousListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("longitude");

                            b1.HasKey("SuspiciousListingId");

                            b1.ToTable("suspicious_listings");

                            b1.WithOwner()
                                .HasForeignKey("SuspiciousListingId");
                        });

                    b.OwnsOne("Core.Domain.Common.ListingDetails", "ListingDetails", b1 =>
                        {
                            b1.Property<Guid>("SuspiciousListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("description");

                            b1.Property<int?>("MaterialType")
                                .HasMaxLength(2)
                                .HasColumnType("int")
                                .HasColumnName("material_type_id");

                            b1.Property<string>("Title")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("title");

                            b1.HasKey("SuspiciousListingId");

                            b1.ToTable("suspicious_listings");

                            b1.WithOwner()
                                .HasForeignKey("SuspiciousListingId");

                            b1.OwnsOne("Core.Domain.Common.Weight", "Weight", b2 =>
                                {
                                    b2.Property<Guid>("ListingDetailsSuspiciousListingId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Unit")
                                        .HasMaxLength(2)
                                        .HasColumnType("nvarchar(2)")
                                        .HasColumnName("weight_unit");

                                    b2.Property<float>("Value")
                                        .HasColumnType("real")
                                        .HasColumnName("weight_value");

                                    b2.HasKey("ListingDetailsSuspiciousListingId");

                                    b2.ToTable("suspicious_listings");

                                    b2.WithOwner()
                                        .HasForeignKey("ListingDetailsSuspiciousListingId");
                                });

                            b1.Navigation("Weight");
                        });

                    b.OwnsOne("Core.Domain.Common.LocationDetails", "LocationDetails", b1 =>
                        {
                            b1.Property<Guid>("SuspiciousListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("address");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("city");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("country_code");

                            b1.Property<string>("PostCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("post_code");

                            b1.Property<string>("___efCoreState")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("state");

                            b1.HasKey("SuspiciousListingId");

                            b1.ToTable("suspicious_listings");

                            b1.WithOwner()
                                .HasForeignKey("SuspiciousListingId");
                        });

                    b.Navigation("ContactDetails");

                    b.Navigation("GeographicLocation");

                    b.Navigation("ListingDetails");

                    b.Navigation("LocationDetails");
                });

            modelBuilder.Entity("Core.Domain.Offers.ReceivedOffer", b =>
                {
                    b.HasOne("Core.Domain.Listings.ActiveListing", null)
                        .WithMany("Offers")
                        .HasForeignKey("active_listing_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Core.Domain.Common.MonetaryValue", "MonetaryValue", b1 =>
                        {
                            b1.Property<Guid>("ReceivedOfferId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("currency_code");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money")
                                .HasColumnName("monetary_value");

                            b1.HasKey("ReceivedOfferId");

                            b1.ToTable("received_offers");

                            b1.WithOwner()
                                .HasForeignKey("ReceivedOfferId");
                        });

                    b.Navigation("MonetaryValue");
                });

            modelBuilder.Entity("Core.Domain.Offers.RejectedOffer", b =>
                {
                    b.HasOne("Core.Domain.Listings.ClosedListing", null)
                        .WithMany("RejectedOffers")
                        .HasForeignKey("closed_listing_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Core.Domain.Common.MonetaryValue", "MonetaryValue", b1 =>
                        {
                            b1.Property<Guid>("RejectedOfferId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("currency_code");

                            b1.Property<decimal>("Value")
                                .HasColumnType("money")
                                .HasColumnName("monetary_value");

                            b1.HasKey("RejectedOfferId");

                            b1.ToTable("rejected_offers");

                            b1.WithOwner()
                                .HasForeignKey("RejectedOfferId");
                        });

                    b.Navigation("MonetaryValue");
                });

            modelBuilder.Entity("Core.Domain.Profiles.ActiveProfile", b =>
                {
                    b.OwnsOne("Core.Domain.Common.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("ActiveProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Phone")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("phone_number");

                            b1.Property<string>("___efCoreCompany")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("company");

                            b1.HasKey("ActiveProfileId");

                            b1.ToTable("active_profiles");

                            b1.WithOwner()
                                .HasForeignKey("ActiveProfileId");

                            b1.OwnsOne("Core.Domain.Common.PersonName", "PersonName", b2 =>
                                {
                                    b2.Property<Guid>("ContactDetailsActiveProfileId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("first_name");

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("last_name");

                                    b2.HasKey("ContactDetailsActiveProfileId");

                                    b2.ToTable("active_profiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactDetailsActiveProfileId");
                                });

                            b1.Navigation("PersonName");
                        });

                    b.OwnsOne("Core.Domain.Common.GeographicLocation", "GeographicLocation", b1 =>
                        {
                            b1.Property<Guid>("ActiveProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("longitude");

                            b1.HasKey("ActiveProfileId");

                            b1.ToTable("active_profiles");

                            b1.WithOwner()
                                .HasForeignKey("ActiveProfileId");
                        });

                    b.OwnsOne("Core.Domain.Common.LocationDetails", "LocationDetails", b1 =>
                        {
                            b1.Property<Guid>("ActiveProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("address");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("city");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("country_code");

                            b1.Property<string>("PostCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("post_code");

                            b1.Property<string>("___efCoreState")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("state");

                            b1.HasKey("ActiveProfileId");

                            b1.ToTable("active_profiles");

                            b1.WithOwner()
                                .HasForeignKey("ActiveProfileId");
                        });

                    b.OwnsOne("Core.Domain.Common.UserPreferences", "UserPreferences", b1 =>
                        {
                            b1.Property<Guid>("ActiveProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CurrencyCode")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("currency_code");

                            b1.Property<string>("DistanceUnit")
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("distance_unit");

                            b1.Property<string>("MassUnit")
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("mass_unit");

                            b1.HasKey("ActiveProfileId");

                            b1.ToTable("active_profiles");

                            b1.WithOwner()
                                .HasForeignKey("ActiveProfileId");
                        });

                    b.Navigation("ContactDetails");

                    b.Navigation("GeographicLocation");

                    b.Navigation("LocationDetails");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("Core.Domain.Profiles.PassiveProfile", b =>
                {
                    b.OwnsOne("Core.Domain.Common.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<Guid>("PassiveProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Phone")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("phone_number");

                            b1.Property<string>("___efCoreCompany")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("company");

                            b1.HasKey("PassiveProfileId");

                            b1.ToTable("passive_profiles");

                            b1.WithOwner()
                                .HasForeignKey("PassiveProfileId");

                            b1.OwnsOne("Core.Domain.Common.PersonName", "PersonName", b2 =>
                                {
                                    b2.Property<Guid>("ContactDetailsPassiveProfileId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("first_name");

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("last_name");

                                    b2.HasKey("ContactDetailsPassiveProfileId");

                                    b2.ToTable("passive_profiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactDetailsPassiveProfileId");
                                });

                            b1.Navigation("PersonName");
                        });

                    b.OwnsOne("Core.Domain.Common.GeographicLocation", "GeographicLocation", b1 =>
                        {
                            b1.Property<Guid>("PassiveProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("longitude");

                            b1.HasKey("PassiveProfileId");

                            b1.ToTable("passive_profiles");

                            b1.WithOwner()
                                .HasForeignKey("PassiveProfileId");
                        });

                    b.OwnsOne("Core.Domain.Common.LocationDetails", "LocationDetails", b1 =>
                        {
                            b1.Property<Guid>("PassiveProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("address");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("city");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("country_code");

                            b1.Property<string>("PostCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("post_code");

                            b1.Property<string>("___efCoreState")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("state");

                            b1.HasKey("PassiveProfileId");

                            b1.ToTable("passive_profiles");

                            b1.WithOwner()
                                .HasForeignKey("PassiveProfileId");
                        });

                    b.OwnsOne("Core.Domain.Common.UserPreferences", "UserPreferences", b1 =>
                        {
                            b1.Property<Guid>("PassiveProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CurrencyCode")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("currency_code");

                            b1.Property<string>("DistanceUnit")
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("distance_unit");

                            b1.Property<string>("MassUnit")
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("mass_unit");

                            b1.HasKey("PassiveProfileId");

                            b1.ToTable("passive_profiles");

                            b1.WithOwner()
                                .HasForeignKey("PassiveProfileId");
                        });

                    b.Navigation("ContactDetails");

                    b.Navigation("GeographicLocation");

                    b.Navigation("LocationDetails");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("Core.Domain.Listings.ActiveListing", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Core.Domain.Listings.ClosedListing", b =>
                {
                    b.Navigation("RejectedOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
